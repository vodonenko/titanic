0.354871}, {0.340443, 0.318408}, {0.340297, 0.274993}, {0.34335,
0.409265}, {0.344028, 0.368065}, {0.344804, 0.329456}, {0.344368,
0.284635}, {0.347014, 0.418994}, {0.349165, 0.382072}, {0.349049,
0.340504}, {0.349456, 0.295865}, {0.351491, 0.429857}, {0.356071,
0.443435}, {0.356071, 0.398863}, {0.351491, 0.388976}, {0.356172,
0.353321}, {0.356172, 0.309975}, {0.358411, 0.454877}, {0.358411,
0.41036}, {0.362798, 0.369538}, {0.360446, 0.325133}, {0.364155,
0.467571}, {0.362889, 0.420759}, {0.365331, 0.335387}, {0.368678,
0.487424}, {0.363703, 0.47831}, {0.367483, 0.439715}, {0.365738,
0.42962}, {0.368995, 0.388912}, {0.36913, 0.378246}, {0.368904,
0.34847}, {0.370623, 0.4994}, {0.371844, 0.453968}, {0.373653,
0.402931}, {0.370826, 0.359332}, {0.37566, 0.370683}, {0.376423,
0.511722}, {0.376932, 0.466235}, {0.379476, 0.410956}, {0.379694,
0.529885}, {0.375915, 0.519319}, {0.380276, 0.479155}, {0.381568,
0.425031}, {0.379985, 0.389722}, {0.375915, 0.380202}, {0.3858,
0.549448}, {0.384056, 0.538726}, {0.3858, 0.497881}, {0.38202,
0.488569}, {0.387109, 0.439954}, {0.386498, 0.403784}, {0.38958,
0.561792}, {0.389754, 0.510832}, {0.392197, 0.451965}, {0.392875,
0.57595}, {0.392197, 0.521523}, {0.393941, 0.463681}, {0.391906,
0.426652}, {0.390161, 0.414378}, {0.394232, 0.585225}, {0.398642,
0.596332}, {0.397963, 0.538244}, {0.394232, 0.528114}, {0.399783,
0.478993}, {0.400338, 0.466613}, {0.396267, 0.439031}, {0.402082,
0.611902}, {0.398303, 0.6028}, {0.402373, 0.556216}, {0.398303,
0.545688}, {0.403391, 0.495316}, {0.401355, 0.453068}, {0.406104,
0.623793}, {0.40814, 0.568879}, {0.409904, 0.509377}, {0.410967,
0.63787}, {0.406444, 0.630627}, {0.410514, 0.580254}, {0.410223,
0.481366}, {0.407122, 0.469301}, {0.414178, 0.523291}, {0.413364,
0.65245}, {0.413364, 0.591678}, {0.414924, 0.49908}, {0.411532,
0.49078}, {0.418655, 0.536546}, {0.418316, 0.663337}, {0.417638,
0.602321}, {0.420284, 0.674419}, {0.422726, 0.547165}, {0.419877,
0.512018}, {0.423404, 0.684939}, {0.422726, 0.622162}, {0.421369,
0.611353}, {0.42447, 0.557626}, {0.424422, 0.525078}, {0.424761,
0.696167}, {0.425779, 0.634297}, {0.428606, 0.569133}, {0.428323,
0.539663}, {0.429849, 0.706908}, {0.429849, 0.643269}, {0.433581,
0.722002}, {0.432563, 0.655778}, {0.433807, 0.586383}, {0.434938,
0.576825}, {0.435277, 0.55974}, {0.431885, 0.547535}, {0.436159,
0.733441}, {0.435955, 0.665054}, {0.43833, 0.598247}, {0.439687,
0.744987}, {0.439415, 0.675892}, {0.436973, 0.569138}, {0.442315,
0.609411}, {0.442061, 0.75292}, {0.442265, 0.684387}, {0.445566,
0.766834}, {0.445405, 0.697798}, {0.445792, 0.624056}, {0.4443,
0.589203}, {0.441043, 0.580122}, {0.450406, 0.782505}, {0.450202,
0.712776}, {0.452803, 0.641795}, {0.448506, 0.60136}, {0.453255,
0.793929}, {0.454476, 0.723346}, {0.456744, 0.651362}, {0.451898,
0.612832}, {0.458489, 0.805123}, {0.457326, 0.734037}, {0.459361,
0.661222}, {0.455697, 0.625379}, {0.463771, 0.744633}, {0.463431,
0.672024}, {0.460379, 0.638707}, {0.465467, 0.81429}, {0.467841,
0.755008}, {0.467095, 0.683667}, {0.465467, 0.650425}, {0.470555,
0.823713}, {0.46852, 0.660311}, {0.474626, 0.690883}, {0.476661,
0.832868}, {0.476254, 0.767727}, {0.47605, 0.704173}, {0.473608,
0.672395}, {0.479714, 0.712668}, {0.476661, 0.680816}, {0.481749,
0.842267}, {0.482767, 0.782716}, {0.487855, 0.71975}, {0.481749,
0.689971}, {0.487855, 0.851862}, {0.487855, 0.794556}, {0.487855,
0.734089}, {0.48582, 0.705349}, {0.492739, 0.742402}, {0.487855,
0.714137}, {0.493961, 0.861506}, {0.494251, 0.806082}, {0.498031,
0.754852}, {0.493961, 0.725122}, {0.501423, 0.874087}, {0.500575,
0.817931}, {0.502509, 0.767447}, {0.505155, 0.829465}, {0.500066,
0.743064}, {0.507868, 0.774796}, {0.509952, 0.885899}, {0.509225,
0.838254}, {0.511057, 0.787514}, {0.506172, 0.757345}, {0.515535,
0.89632}, {0.51567, 0.848142}, {0.517706, 0.798719}, {0.519402,
0.858394}, {0.522047, 0.809778}, {0.523133, 0.90851}, {0.522862,
0.819882}, {0.525762, 0.868648}, {0.529578, 0.830332}, {0.531468,
0.922519}, {0.530596, 0.878754}, {0.534259, 0.838486}, {0.535684,
0.889764}, {0.534666, 0.848151}, {0.537719, 0.932232}, {0.541111,
0.898431}, {0.541111, 0.861089}, {0.543825, 0.941632}, {0.543486,
0.906486}, {0.543825, 0.869755}, {0.550948, 0.951609}, {0.549931,
0.916252}, {0.549931, 0.879276}, {0.553798, 0.888138}, {0.558072,
0.923944}, {0.560107, 0.895146}, {0.561634, 0.959823}, {0.567231,
0.933638}, {0.566213, 0.905765}, {0.570792, 0.968413}, {0.570284,
0.900154}, {0.573744, 0.91685}, {0.577814, 0.941746}, {0.576389,
0.905648}, {0.581704, 0.975819}, {0.582834, 0.924322}, {0.582495,
0.914072}, {0.58894, 0.95005}, {0.589619, 0.934284}, {0.590491,
0.984994}, {0.592332, 0.943364}, {0.590636, 0.922496}, {0.598777,
0.959012}, {0.600958, 0.993262}, {0.600304, 0.934417}, {0.603575,
0.944416}, {0.606919, 0.96851}, {0.610424, 1.00115}, {0.611716,
0.95239}, {0.615399, 0.976161}, {0.612007, 0.944106}, {0.6206,
1.00954}, {0.622387, 0.957803}, {0.624727, 0.983925}, {0.63236,
1.01995}, {0.631487, 0.994114}, {0.631342, 0.967838}, {0.640246,
1.00407}, {0.640161, 0.9778}, {0.643554, 1.02869}, {0.642536,
0.997571}, {0.649223, 1.00981}, {0.651695, 0.985616}, {0.654748,
1.00618}, {0.655765, 1.03427}, {0.660853, 1.01344}, {0.663906,
0.989039}, {0.667977, 1.03818}, {0.672047, 1.01491}, {0.676118,
0.993438}, {0.680189, 1.04225}, {0.685277, 1.02208}, {0.681206,
1.01492}, {0.68833, 0.996983}, {0.6924, 1.04592}, {0.697488,
1.02606}, {0.694436, 1.01883}, {0.700541, 1.00041}, {0.704612,
1.04971}, {0.708682, 1.02323}, {0.711445, 1.0317}, {0.712753,
1.00444}, {0.716824, 1.05399}, {0.723075, 1.03307}, {0.719877,
1.02665}, {0.724965, 1.00896}, {0.729035, 1.0579}, {0.735955,
1.03489}, {0.737176, 1.01238}, {0.741247, 1.06095}, {0.74689,
1.03829}, {0.749388, 1.01739}, {0.753459, 1.06377}, {0.760027,
1.04149}, {0.7616, 1.02138}, {0.76567, 1.06536}, {0.771776,
1.04416}, {0.773811, 1.02666}, {0.777882, 1.06732}, {0.783988,
1.04621}, {0.786023, 1.03246}, {0.790094, 1.06891}, {0.795737,
1.05007}, {0.798235, 1.03784}, {0.802305, 1.07148}, {0.80719,
1.04473}, {0.809138, 1.05608}, {0.814517, 1.07283}, {0.818442,
1.04347}, {0.820962, 1.05819}, {0.822319, 1.04842}, {0.826729,
1.07466}, {0.832834, 1.06405}, {0.833598, 1.05077}, {0.83894,
1.07613}, {0.845046, 1.06222}, {0.845046, 1.05124}, {0.851152,
1.07602}, {0.857258, 1.06414}, {0.856444, 1.05111}, {0.863364,
1.07529}, {0.869469, 1.06407}, {0.869469, 1.04906}, {0.876593,
1.07191}, {0.880954, 1.06055}, {0.881681, 1.04687}, {0.887787,
1.07473}, {0.893893, 1.0592}, {0.893893, 1.04602}, {0.900461,
1.07728}, {0.906104, 1.0592}, {0.906104, 1.04578}, {0.91221,
1.0805}, {0.918316, 1.05836}, {0.918316, 1.04286}, {0.924422,
1.09033}, {0.924422, 1.07483}, {0.930528, 1.058}, {0.930528,
1.04213}, {0.936634, 1.09339}, {0.936634, 1.07228}, {0.943466,
1.06027}, {0.942739, 1.04165}, {0.948845, 1.09364}, {0.949049,
1.06728}, {0.95546, 1.06133}, {0.954951, 1.0408}, {0.961057,
1.09364}, {0.967977, 1.06106}, {0.967163, 1.03873}, {0.973269,
1.09328}, {0.978912, 1.061}, {0.979374, 1.03849}, {0.98548,
1.09329}, {0.989551, 1.05379}, {0.991586, 1.0673}, {0.991586,
1.03801}, {0.997692, 1.09354}, {1.00176, 1.04949}, {1.0038,
1.06865}, {1.0038, 1.03741}, {1.0099, 1.09367}, {1.01397,
1.04381}, {1.01601, 1.07122}, {1.01674, 1.03614}, {1.02212,
1.09233}, {1.02822, 1.07147}, {1.02822, 1.03711}, {1.03433,
1.08965}, {1.04043, 1.0683}, {1.04043, 1.03602}, {1.04654,
1.08697}, {1.05264, 1.06574}, {1.05264, 1.03621}, {1.05875,
1.08283}, {1.06486, 1.06319}, {1.06486, 1.03512}, {1.07096,
1.08064}, {1.07707, 1.05953}, {1.07707, 1.03473}, {1.08317,
1.0765}, {1.08928, 1.05722}, {1.08826, 1.03577}, {1.09437,
1.03264}, {1.09539, 1.07431}, {1.10149, 1.05421}, {1.10556,
1.03249}, {1.1076, 1.07151}, {1.1137, 1.05125}, {1.11777,
1.0335}, {1.11981, 1.06846}, {1.12591, 1.04784}, {1.131,
1.04156}, {1.12999, 1.02665}, {1.13202, 1.067}, {1.14118,
1.04352}, {1.1422, 1.022}, {1.14423, 1.06481}, {1.15543,
1.04454}, {1.15441, 1.01796}, {1.15644, 1.06372}, {1.16662,
1.04597}, {1.16662, 1.01284}, {1.16866, 1.06177}, {1.17849,
1.05519}, {1.17883, 1.0392}, {1.17883, 1.00869}, {1.19104,
1.05483}, {1.19104, 1.03689}, {1.19104, 1.00382}, {1.20398,
1.05795}, {1.20326, 1.0347}, {1.20326, 0.998943}, {1.215,
1.05836}, {1.21547, 1.03361}, {1.21547, 0.994922}, {1.22611,
1.0551}, {1.22768, 1.03142}, {1.22768, 0.989192}, {1.23785,
1.05924}, {1.23785, 1.04582}, {1.23989, 1.02861}, {1.23989,
0.983463}, {1.25007, 1.05742}, {1.25007, 1.04066}, {1.2521,
1.02728}, {1.2521, 0.978709}, {1.26228, 1.05523}, {1.26228,
1.03453}, {1.26504, 1.02731}, {1.26431, 0.972858}, {1.27449,
1.05304}, {1.27673, 1.02893}, {1.27551, 1.02259}, {1.27653,
0.968096}, {1.2867, 1.05097}, {1.28874, 1.0225}, {1.28874,
0.962485}, {1.29891, 1.04902}, {1.30138, 1.0185}, {1.30095,
0.956889}, {1.31112, 1.04659}, {1.31214, 1.01571}, {1.31316,
0.95299}, {1.32334, 1.04379}, {1.32639, 1.01392}, {1.32537,
0.951166}, {1.33555, 1.0416}, {1.33758, 1.01207}, {1.33758,
0.948975}, {1.34776, 1.03831}, {1.34903, 1.01476}, {1.3498,
0.947761}, {1.35244, 1.00636}, {1.35997, 1.0349}, {1.36201,
1.01903}, {1.36201, 0.945814}, {1.36404, 1.0028}, {1.37218,
1.03271}, {1.37422, 1.02026}, {1.37422, 0.943746}, {1.37625,
0.99919}, {1.38439, 1.02717}, {1.38716, 1.02147}, {1.38643,
0.941555}, {1.38847, 0.995494}, {1.39864, 1.02446}, {1.39864,
0.940097}, {1.40068, 0.992571}, {1.41158, 1.02355}, {1.41085,
0.93937}, {1.41289, 0.991723}, {1.42307, 1.02294}, {1.42307,
0.938522}, {1.4251, 0.99356}, {1.43528, 1.02883}, {1.43528,
1.01809}, {1.43528, 0.93682}, {1.43731, 0.99503}, {1.44749,
1.03213}, {1.44749, 1.01639}, {1.44749, 0.935239}, {1.44952,
0.995768}, {1.4597, 1.03397}, {1.4597, 1.01347}, {1.4597,
0.935001}, {1.46174, 0.997727}, {1.47191, 1.03568}, {1.47191,
1.01201}, {1.47191, 0.934397}, {1.47395, 0.998953}, {1.48412,
1.03874}, {1.48412, 1.00933}, {1.48412, 0.933549}, {1.48616,
1.00042}, {1.49634, 1.04045}, {1.4968, 1.00444}, {1.49634,
0.932212}, {1.50855, 1.03708}, {1.50855, 1.00462}, {1.50855,
0.930998}, {1.52076, 1.03034}, {1.52076, 1.00288}, {1.52076,
0.928197}, {1.53297, 1.024}, {1.53297, 1.00215}, {1.53297,
0.92564}, {1.54518, 1.01766}, {1.546, 0.999476}, {1.54518,
0.923572}, {1.55739, 1.01083}, {1.55638, 1.00038}, {1.55739,
0.920771}, {1.5619, 0.995405}, {1.56961, 1.00522}, {1.56961,
0.917482}, {1.57368, 0.994242}, {1.58182, 1.00335}, {1.58182,
0.91578}, {1.58661, 0.990605}, {1.59403, 1.00475}, {1.59403,
0.913345}, {1.5981, 0.990466}, {1.60353, 0.988277}, {1.60624,
1.00671}, {1.60624, 0.913717}, {1.61382, 0.993538}, {1.61866,
1.00361}, {1.61845, 0.983891}, {1.61845, 0.915309}, {1.62645,
0.999515}, {1.63066, 0.980969}, {1.63066, 0.916536}, {1.6327,
1.00528}, {1.64288, 0.978534}, {1.64288, 0.917518}, {1.64491,
1.00597}, {1.65509, 0.975489}, {1.65509, 0.918988}, {1.65794,
1.00795}, {1.6673, 0.97281}, {1.6673, 0.921679}, {1.66933,
1.00918}, {1.67951, 0.970742}, {1.67951, 0.922295}, {1.68155,
1.01773}, {1.68155, 1.00638}, {1.69172, 0.968429}, {1.69172,
0.922545}, {1.69376, 1.01859}, {1.69376, 1.00699}, {1.70393,
0.968435}, {1.70393, 0.91767}, {1.70597, 1.01688}, {1.70597,
1.00663}, {1.71615, 0.967831}, {1.71615, 0.91316}, {1.71716,
1.01048}, {1.7253, 1.00803}, {1.72836, 0.966617}, {1.72836,
0.908407}, {1.73604, 1.00869}, {1.7365, 0.890961}, {1.74057,
0.965402}, {1.74057, 0.903654}, {1.74871, 1.00839}, {1.74944,
0.89278}, {1.75278, 0.965164}, {1.75258, 0.898681}, {1.76165,
1.00565}, {1.76092, 0.89204}, {1.76499, 0.964682}, {1.77313,
1.00813}, {1.77313, 1.00093}, {1.77313, 0.89193}, {1.7772,
0.964444}, {1.78377, 0.888352}, {1.78534, 1.00325}, {1.78942,
0.96384}, {1.7945, 0.890655}, {1.79756, 1.00283}, {1.80163,
0.961771}, {1.80773, 0.894095}, {1.80977, 1.00286}, {1.81384,
0.959092}, {1.81893, 0.901496}, {1.82198, 1.00254}, {1.82198,
0.891429}, {1.82605, 0.956536}, {1.83216, 0.909922}, {1.83419,
1.00175}, {1.83826, 0.954589}, {1.83826, 0.891254}, {1.84509,
0.916396}, {1.8464, 1.00094}, {1.85047, 0.95191}, {1.85658,
0.923236}, {1.85943, 0.998062}, {1.86269, 0.94972}, {1.86879,
0.929648}, {1.87083, 0.996694}, {1.8749, 0.947895}, {1.881,
0.93423}, {1.88304, 0.998591}, {1.88711, 0.947047}, {1.89321,
0.935457}, {1.89525, 1.00297}, {1.89525, 0.995254}, {1.89932,
0.947907}, {1.90543, 0.935951}, {1.90746, 1.00036}, {1.91153,
0.948401}, {1.91764, 0.935957}, {1.91967, 1.00808}, {1.91967,
0.99795}, {1.92374, 0.948407}, {1.92985, 0.936451}, {1.93188,
1.00943}, {1.93188, 0.999176}, {1.93596, 0.949145}, {1.94206,
0.937067}, {1.9441, 1.01151}, {1.9441, 1.00016}, {1.94817,
0.950249}, {1.95427, 0.937683}, {1.95631, 1.01286}, {1.95631,
1.00102}, {1.96038, 0.951842}, {1.96648, 0.937201}, {1.96852,
1.0142}, {1.96852, 1.0031}, {1.97259, 0.952092}, {1.9787,
0.934461}, {1.98073, 1.01319}, {1.98073, 1.00408}, {1.9848,
0.952708}, {1.99091, 0.928549}, {1.99294, 1.00781}, {1.99701,
0.955033}, {2.00312, 0.920867}, {2.00515, 1.01148}, {2.0021,
1.00556}, {2.00923, 0.956137}, {2.01519, 0.912679}, {2.01737,
1.0098}, {2.02144, 0.957729}, {2.02754, 0.905746}, {2.03004,
1.00877}, {2.03365, 0.960176}, {2.03961, 0.897524}, {2.04179,
1.00799}, {2.04586, 0.961524}, {2.04993, 0.890931}, {2.054,
1.01522}, {2.054, 1.00265}, {2.05807, 0.963605}, {2.06214,
0.884859}, {2.06621, 1.01718}, {2.06621, 1.00156}, {2.07028,
0.964587}, {2.07537, 0.883479}, {2.07842, 1.01706}, {2.07842,
1.0045}, {2.0825, 0.964349}, {2.0861, 0.892746}, {2.09064,
1.01307}, {2.08555, 1.00706}, {2.09471, 0.963501}, {2.09623,
0.903736}, {2.10285, 1.01814}, {2.10299, 0.912303}, {2.10692,
0.961798}, {2.11099, 0.920858}, {2.11587, 1.02337}, {2.11099,
1.01732}, {2.11913, 0.96095}, {2.12117, 0.929979}, {2.12625,
1.03009}, {2.12727, 1.01855}, {2.13134, 0.959491}, {2.13032,
0.941204}, {2.13602, 1.03895}, {2.13948, 1.01856}, {2.13948,
0.950587}, {2.14457, 0.96023}, {2.14762, 1.04556}, {2.15169,
1.01917}, {2.15577, 0.968187}, {2.15577, 0.956819}, {2.16034,
1.05191}, {2.16391, 1.01881}, {2.16543, 0.97827}, {2.16798,
0.956214}, {2.17205, 1.05233}, {2.17612, 1.01821}, {2.17815,
0.981846}, {2.18019, 0.953047}, {2.18426, 1.04604}, {2.18833,
1.01724}, {2.19036, 0.98112}, {2.1924, 0.94866}, {2.19647,
1.03799}, {2.20258, 1.03161}, {2.20054, 1.01676}, {2.20258,
0.980028}, {2.20461, 0.944883}, {2.21203, 1.02712}, {2.21275,
1.01518}, {2.21479, 0.979545}, {2.21682, 0.94074}, {2.22496,
1.02116}, {2.22496, 1.01287}, {2.227, 0.978819}, {2.22904,
0.936841}, {2.23616, 1.01446}, {2.23785, 1.00872}, {2.23921,
0.978093}, {2.24125, 0.932454}, {2.24939, 1.0108}, {2.24939,
1.00275}, {2.25142, 0.978221}, {2.25346, 0.928555}, {2.2616,
1.0102}, {2.2616, 0.999093}, {2.26364, 0.977251}, {2.26567,
0.927951}, {2.27381, 1.01228}, {2.27381, 1.00142}, {2.27585,
0.976768}, {2.27788, 0.931617}, {2.28649, 1.01055}, {2.28093,
1.00423}, {2.28806, 0.97531}, {2.29009, 0.93443}, {2.2987,
1.01402}, {2.29315, 1.00765}, {2.30027, 0.97434}, {2.30231,
0.939195}, {2.31045, 1.01663}, {2.31248, 0.97398}, {2.31452,
0.94213}, {2.32368, 1.02288}, {2.31961, 1.01596}, {2.32469,
0.973253}, {2.32673, 0.946529}, {2.33406, 1.0238}, {2.33691,
0.972039}, {2.33894, 0.94983}, {2.34708, 1.02737}, {2.34912,
0.970703}, {2.35115, 0.953619}, {2.35976, 1.03056}, {2.36133,
0.970586}, {2.36336, 0.955944}, {2.3715, 1.03612}, {2.3715,
1.02795}, {2.37354, 0.96925}, {2.37558, 0.95595}, {2.38372,
1.04028}, {2.38372, 1.02637}, {2.38575, 0.96767}, {2.38779,
0.956078}, {2.39593, 1.04358}, {2.39593, 1.02479}, {2.39796,
0.965601}, {2.4, 0.957182}, {2.40814, 1.04737}, {2.40814,
1.02198}, {2.40967, 0.962007}, {2.4173, 0.958655}, {2.42035,
1.05079}, {2.42035, 1.0204}, {2.42849, 0.959856}, {2.43256,
1.05299}, {2.43256, 1.01834}, {2.43969, 0.960455}, {2.4407,
1.0541}, {2.44477, 1.01737}, {2.45393, 0.958298}, {2.45699,
1.01871}, {2.46309, 1.05431}, {2.46469, 0.961767}, {2.46574,
0.95182}, {2.4692, 1.02104}, {2.4753, 1.05155}, {2.47734,
0.964542}, {2.47734, 0.946298}, {2.48141, 1.02538}, {2.48752,
1.04659}, {2.48752, 0.939652}, {2.48955, 0.965402}, {2.49362,
1.02874}, {2.49973, 1.04216}, {2.499, 0.933591}, {2.50176,
0.968336}, {2.50656, 1.03363}, {2.51214, 1.03875}, {2.51194,
0.927461}, {2.51397, 0.970051}, {2.51988, 1.0329}, {2.52435,
1.04008}, {2.52415, 0.921121}, {2.52619, 0.971399}, {2.53026,
1.02961}, {2.53636, 1.04365}, {2.53636, 0.914537}, {2.5384,
0.973114}, {2.54247, 1.02693}, {2.54857, 1.04731}, {2.54857,
0.910394}, {2.55061, 0.972265}, {2.55468, 1.02791}, {2.56079,
1.05061}, {2.56079, 0.910888}, {2.56282, 0.969709}, {2.56689,
1.03207}, {2.573, 1.05331}, {2.573, 0.913213}, {2.57503,
0.965565}, {2.5791, 1.03651}, {2.58521, 1.05711}, {2.58521,
0.916025}, {2.58724, 0.962399}, {2.59131, 1.04197}, {2.59742,
1.05954}, {2.59742, 0.91774}, {2.59946, 0.958866}, {2.60353,
1.04624}, {2.60963, 1.06248}, {2.60963, 0.920919}, {2.61167,
0.955455}, {2.61574, 1.05113}, {2.62184, 1.06553}, {2.62184,
0.923243}, {2.62388, 0.952044}, {2.62795, 1.05669}, {2.62999,
0.910068}, {2.63449, 1.06565}, {2.63406, 0.925812}, {2.63609,
0.949365}, {2.64077, 1.05946}, {2.6422, 0.91105}, {2.64627,
1.06689}, {2.64627, 0.927282}, {2.6483, 0.948151}, {2.65339,
1.06064}, {2.65441, 0.91069}, {2.65848, 0.927532}, {2.66051,
0.948767}, {2.66458, 1.06232}, {2.66502, 1.05261}, {2.67069,
0.927538}, {2.67273, 0.949383}, {2.6768, 1.05836}, {2.6768,
1.0485}, {2.6829, 0.927544}, {2.68494, 0.951341}, {2.68901,
1.05523}, {2.68901, 1.04311}, {2.69511, 0.92755}, {2.69715,
0.952446}, {2.70122, 1.05142}, {2.70122, 1.03836}, {2.70733,
0.927556}, {2.70936, 0.952452}, {2.71343, 1.04752}, {2.71343,
1.03352}, {2.71954, 0.927562}, {2.72157, 0.953922}, {2.72564,
1.04362}, {2.72564, 1.02824}, {2.73175, 0.927324}, {2.73378,
0.955514}, {2.73785, 1.04033}, {2.73785, 1.02605}, {2.74396,
0.926842}, {2.746, 0.957107}, {2.75007, 1.03643}, {2.75007,
1.02813}, {2.75617, 0.926604}, {2.75821, 0.959553}, {2.76155,
1.03497}, {2.76838, 0.925389}, {2.77042, 0.962}, {2.77403,
1.03735}, {2.7806, 0.924541}, {2.78263, 0.964446}, {2.78467,
1.02973}, {2.7867, 1.04645}, {2.79281, 0.922838}, {2.79484,
0.967015}, {2.79688, 1.02803}, {2.79891, 1.05195}, {2.80502,
0.922844}, {2.80705, 0.969584}, {2.80909, 1.02609}, {2.81112,
1.05788}, {2.81723, 0.922484}, {2.81927, 0.97142}, {2.8213,
1.02316}, {2.82232, 1.06043}, {2.82944, 0.922978}, {2.83148,
0.973745}, {2.83351, 1.02146}, {2.84216, 0.927988}, {2.84369,
0.974849}, {2.84572, 1.02293}, {2.85183, 1.06076}, {2.85387,
0.935663}, {2.8559, 0.974977}, {2.85794, 1.02538}, {2.86201,
0.943941}, {2.86404, 1.05894}, {2.86811, 0.974617}, {2.87015,
1.02673}, {2.87396, 0.95255}, {2.87625, 1.05663}, {2.88032,
0.974086}, {2.88236, 1.0282}, {2.88599, 0.962056}, {2.88847,
1.05297}, {2.89355, 0.970521}, {2.89457, 1.02942}, {2.90068,
1.0509}, {2.90475, 0.975916}, {2.90678, 1.03138}, {2.91289,
1.04725}, {2.91798, 0.987955}, {2.91696, 0.975348}, {2.91899,
1.03456}, {2.9251, 1.04469}, {2.92917, 0.995636}, {2.92917,
0.974525}, {2.93121, 1.03457}, {2.93731, 1.04592}, {2.94138,
0.999547}, {2.93935, 0.975262}, {2.94342, 1.03494}, {2.94952,
1.04897}, {2.95258, 1.00031}, {2.95563, 1.03677}, {2.95868,
1.05118}, {2.96784, 0.997608}, {2.96886, 0.988456}}"
str_input <-  substr(str_input, 3, nchar(str_input)-2)
str_input_list <- strsplit(str_input, "\\}\\, \\{")[[1]]
x = as.numeric(unlist(lapply(str_input_list, function(x) strsplit(x, "\\,")[[1]][1])))
y = as.numeric(unlist(lapply(str_input_list, function(x) strsplit(x, "\\,")[[1]][2])))
#  Defining cost function
cost_f <- function(a, b, c, d){
sum((   y  - (a+b*x)*c/sqrt(1+(a+b*x)^2) - d)^2)
}
# Defining gradient functions for the equetion coefficients
gradient_a <- function(a){
sum(   -2*c*( (y - d)*sqrt((a+b*x)^2 +1 )-c*(a+b*x)) /   ((a+b*x)^2 + 1)^2  )
}
gradient_b <- function(b){
sum(   -2*c*x*( (y - d)*sqrt((a+b*x)^2 +1 )-c*(a+b*x)) /   ((a+b*x)^2 + 1)^2  )
}
gradient_c <- function(c){
sum(  (2*((b*x+a)*c- sqrt((b*x+a)^2+1)*(y-d)))/((b*x+a)+1)   )
}
gradient_d <- function(d){
sum( -2*(-d+y -(c*(b*x+a))/sqrt((b*x+a)^2 + 1)    ) )
}
# Setting initial values for coefficients:
a = 0
b = 0
c = 0
d = 0
# Setting learning rate:
alpha = 0.0000000001
for( i in 1:100000000){
new_a = a - alpha*gradient_a(a)
new_b = b - alpha*gradient_b(b)
new_c = c - alpha*gradient_c(c)
new_d = d - alpha*gradient_d(d)
a = new_a
b = new_b
c = new_c
d = new_d
#if(sum_squared  < cost_f(a,b,c,d)){break}
sum_squared = cost_f(a,b,c,d)
}
plot(x,y); lines(x, mapply(sigmoid_function,x),col = "blue")
mapply(sigmoid_function,x)
sigmoid_function <- function(x){
(a+b*x)*c/sqrt(1+(a+b*x)^2) + d
}
# Adding theoretical values to the scatter plot:
plot(x,y); lines(x, mapply(sigmoid_function,x),col = "blue")
install.packages("ggvis")
install.packages("ggvis")
library("ggvis", lib.loc="C:/Program Files/R/R-3.2.3/library")
source('~/.active-rstudio-document', echo=TRUE)
?knn
library(class)
?knn
View(mtcars)
View(iris)
?sample
sample(1:nrow(iris), round(1:nrow(iris)*0.9))
train_index = sample(1:nrow(iris), round(1:nrow(iris)*0.9))
train_index = 1:nrow(iris) %in% train_index
test_set = irsis[!train_index,]
test_set = iris[!train_index,]
test_set = iris[!train_index,]
train_set = iris[train_index,]
train_index = sample(1:nrow(iris), round(1:nrow(iris)*0.9))
train_index = 1:nrow(iris) %in% train_index
train_index = sample(1:nrow(iris), round(1:nrow(iris)*0.9))
round(1:nrow(iris)*0.9)
train_index = sample(1:nrow(iris), round(1:nrow(iris)*0.7))
1:nrow(iris) %in% train_index
1:nrow(iris)
train_index
:nrow(iris)
1:nrow(iris)
train_index = sample(1:nrow(iris), size = round(nrow(iris)*0.7))
train_index = 1:nrow(iris) %in% train_index
train_set = iris[train_index,]
test_set = iris[!train_index,]
train_index = sample(1:nrow(iris), size = round(nrow(iris)*0.8))
train_index = 1:nrow(iris) %in% train_index
train_set = iris[train_index,]
test_set = iris[!train_index,]
library("dplyr", lib.loc="C:/Program Files/R/R-3.2.3/library")
iris[train_index,] %>% select(-Spiecies)
train_set = iris[train_index,] %>% select(-Species)
test_set = iris[!train_index,] %>% select(-Species)
knn(train_set, test_set, iris$Species[train_index], k = 3, prob=TRUE)
knn(train_set, test_set, iris$Species[train_index], k = 4, prob=TRUE)
source('~/R_repository/lichnoe/kaggle_titanic/script.R', echo=TRUE)
lr_xfit = function(iteration){
library(caret)
train_set_index <- sample(1:nrow(train_set_X), round(0.9 * nrow(train_set_X)))
train_set_index <- (1:nrow(train_set_X)) %in% train_set_index
#train_set <- input_data[train_set_index,]
#test_set <- input_data[!train_set_index, ]
y = train_set_Y
#logregr.poly <- function(){
alpha = 0.01
m = length(y)
X = as.matrix(cbind(x0_norm = rep(1,m),train_set_X))
X_test = X[!train_set_index,]
y_test = y[!train_set_index]
X = X[train_set_index,]
Y = y[train_set_index]
m = length(Y)
n = ncol(X)
THETA = rep(0, n)
H_theta = function(i){
1/(1+exp(-(t(THETA) %*% X[i,]) ) )
}
J_theta <- function(){ -(1/m)*(  sum(  Y*log(mapply(H_theta, 1:m))  +   (1-Y)*log(1 - (mapply(H_theta, 1:m)) )   ) ) }
gradient_j <- function(j){sum((mapply(H_theta, 1:m) - Y)*X[,j]) }
#error_summary <- data.table()
for(i in 1:250){
NEW_THETA <- THETA - alpha*mapply(gradient_j, 1:n)
THETA <- NEW_THETA
#print(J_theta())
cost = J_theta()
#error_summary <- rbind(error_summary, data.table(i, cost))
}
y_poly = mapply(function(i) 1/(1+exp(-(t(THETA) %*% X_test[i,]) ) ), 1:nrow(X_test))>0.5
return(as.numeric(confusionMatrix(as.logical(y[!train_set_index]), y_poly)[[3]][1]))
}
lr_xfit()
lr_xfit = function(iteration){
library(caret)
train_set_index <- sample(1:nrow(train_set_X), round(0.9 * nrow(train_set_X)))
train_set_index <- (1:nrow(train_set_X)) %in% train_set_index
#train_set <- input_data[train_set_index,]
#test_set <- input_data[!train_set_index, ]
y = train_set_Y
#logregr.poly <- function(){
alpha = 0.01
m = length(y)
X = as.matrix(cbind(x0_norm = rep(1,m),train_set_X))
X_test = X[!train_set_index,]
y_test = y[!train_set_index]
X = X[train_set_index,]
Y = y[train_set_index]
m = length(Y)
n = ncol(X)
THETA = rep(0, n)
H_theta = function(i){
1/(1+exp(-(t(THETA) %*% X[i,]) ) )
}
J_theta <- function(){ -(1/m)*(  sum(  Y*log(mapply(H_theta, 1:m))  +   (1-Y)*log(1 - (mapply(H_theta, 1:m)) )   ) ) }
gradient_j <- function(j){sum((mapply(H_theta, 1:m) - Y)*X[,j]) }
#error_summary <- data.table()
for(i in 1:100){
NEW_THETA <- THETA - alpha*mapply(gradient_j, 1:n)
THETA <- NEW_THETA
#print(J_theta())
cost = J_theta()
#error_summary <- rbind(error_summary, data.table(i, cost))
}
y_poly = mapply(function(i) 1/(1+exp(-(t(THETA) %*% X_test[i,]) ) ), 1:nrow(X_test))>0.5
return(as.numeric(confusionMatrix(as.logical(y[!train_set_index]), y_poly)[[3]][1]))
}
lr_xfit()
lr_xfit()
total_cores <- 8
cl <- makeCluster(total_cores)
registerDoParallel(cl)
log_regr_x_val =  foreach(i=1:30, .combine = "c") %dopar% lr_xfit()
stopCluster(cl)
mean(log_regr_x_val)
lr_xfit = function(iteration){
library(caret)
train_set_index <- sample(1:nrow(train_set_X), round(0.9 * nrow(train_set_X)))
train_set_index <- (1:nrow(train_set_X)) %in% train_set_index
#train_set <- input_data[train_set_index,]
#test_set <- input_data[!train_set_index, ]
y = train_set_Y
#logregr.poly <- function(){
alpha = 0.01
m = length(y)
X = as.matrix(cbind(x0_norm = rep(1,m),train_set_X))
X_test = X[!train_set_index,]
y_test = y[!train_set_index]
X = X[train_set_index,]
Y = y[train_set_index]
m = length(Y)
n = ncol(X)
THETA = rep(0, n)
H_theta = function(i){
1/(1+exp(-(t(THETA) %*% X[i,]) ) )
}
J_theta <- function(){ -(1/m)*(  sum(  Y*log(mapply(H_theta, 1:m))  +   (1-Y)*log(1 - (mapply(H_theta, 1:m)) )   ) ) }
gradient_j <- function(j){sum((mapply(H_theta, 1:m) - Y)*X[,j]) }
#error_summary <- data.table()
for(i in 1:150){
NEW_THETA <- THETA - alpha*mapply(gradient_j, 1:n)
THETA <- NEW_THETA
#print(J_theta())
cost = J_theta()
#error_summary <- rbind(error_summary, data.table(i, cost))
}
y_poly = mapply(function(i) 1/(1+exp(-(t(THETA) %*% X_test[i,]) ) ), 1:nrow(X_test))>0.5
return(as.numeric(confusionMatrix(as.logical(y[!train_set_index]), y_poly)[[3]][1]))
}
total_cores <- 8
cl <- makeCluster(total_cores)
registerDoParallel(cl)
log_regr_x_val =  foreach(i=1:30, .combine = "c") %dopar% lr_xfit()
stopCluster(cl)
mean(log_regr_x_val)
